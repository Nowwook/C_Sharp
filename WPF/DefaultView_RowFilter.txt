DefaultView.RowFilter
- DataTable의 데이터에서 필터링을 적용
- SQL의 WHERE 절과 유사하게, 문자열 표현식을 사용하여 특정 조건을 기준으로 행(row)을 필터링
- 필터링 표현식은 기본적으로 열(column)의 데이터 값을 기준으로 조건을 설정
- 필터링할 때 데이터 타입에 유의, 문자열은 작은따옴표(')로 감싸고, 날짜는 #으로 감싸서 사용
- RowFilter는 기본적으로 대소문자를 구분

비교 연산자: >, <, >=, <=, =, <>
- 숫자, 날짜, 문자열 등
"Age > 25" (나이가 25보다 큰 행)
"Name = 'Alice'" (이름이 Alice인 행)
"DateOfBirth >= #2020-01-01#" (날짜가 2020년 1월 1일 이후인 행)

논리 연산자: AND, OR, NOT
"Age > 25 AND Age < 40" (나이가 25보다 크고 40보다 작은 행)
"Name = 'Alice' OR Name = 'Bob'" (이름이 Alice이거나 Bob인 행)
"NOT Age = 30" (나이가 30이 아닌 행)

LIKE 연산자: 부분 문자열 검색
- %는 0개 이상의 문자, _는 단일 문자
"Name LIKE 'A%'" (A로 시작하는 이름)
"Name LIKE '%ice'" (ice로 끝나는 이름)
"Name LIKE '_l_c_'" (두 번째 자리가 l이고, 네 번째 자리가 c인 5글자 이름)

IN 연산자: 특정 값 목록과 일치하는 행
"Age IN (25, 30, 35)" (나이가 25, 30 또는 35인 행)
"Name IN ('Alice', 'Bob', 'Charlie')" (이름이 Alice, Bob 또는 Charlie인 행)

NULL 처리: IS NULL, IS NOT NULL
"Age IS NULL" (나이 값이 없는 행)
"Name IS NOT NULL" (이름 값이 있는 행)

수학 함수와 문자열 함수: 함수 사용
- LEN(), SUBSTRING(), TRIM(), ISNULL() 등
"LEN(Name) > 5" (이름의 길이가 5글자보다 긴 행)
"SUBSTRING(Name, 1, 1) = 'A'" (이름의 첫 글자가 A인 행)

날짜 필터링: 날짜 비교
- 날짜는 #으로 감싸서 사용
"DateOfBirth >= #2020-01-01#" (날짜가 2020년 1월 1일 이후인 행)
"DateOfBirth <= #1990-12-31#" (날짜가 1990년 12월 31일 이전인 행)

NULL 값 필터링:
dataTable.DefaultView.RowFilter = "Age IS NULL";

대소문자 구분:
dataTable.DefaultView.RowFilter = "LOWER(Name) = 'alice'";
